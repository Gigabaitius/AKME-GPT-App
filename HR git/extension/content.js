(function() {
  'use strict';
  
  let akmeGPTPanel = null;
  
  const knowledgeBase = {
    objections: {
      '–¥–∞–ª–µ–∫–æ': '–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –æ–ø–∞—Å–µ–Ω–∏—è. –£ –Ω–∞—Å –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—Ç—Å—è –±–∏–ª–µ—Ç—ã –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø–ª—é—Å —Ö–æ—Ä–æ—à–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Å—á–µ—Ç –≤–∞—Ö—Ç–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞.',
      '–Ω–µ —Ö–æ—á—É': '–ü–æ–Ω–∏–º–∞—é, —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—Å—Ç–æ–µ. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö - –≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.',
      '–º–∞–ª–æ': '–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 80 000 —Ä—É–±–ª–µ–π + –ø—Ä–µ–º–∏–∏ + –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –±–∏–ª–µ—Ç–æ–≤. –ó–∞ –≤–∞—Ö—Ç—É –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ.'
    },
    salary: {
      '–∑–∞—Ä–ø–ª–∞—Ç–∞': '–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 80 000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü, –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞: –∞–≤–∞–Ω—Å 15 —á–∏—Å–ª–∞, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –¥–æ 5 —á–∏—Å–ª–∞.',
      '—Å–∫–æ–ª—å–∫–æ': '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç 80 000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü + –ø—Ä–µ–º–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞–±–æ—Ç—ã.',
      '–¥–µ–Ω—å–≥–∏': '–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–æ–π–Ω–∞—è - –æ—Ç 80 000 —Ä—É–±–ª–µ–π + –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–æ–µ–∑–¥–∞ + –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ.'
    },
    documents: {
      '–¥–æ–∫—É–º–µ–Ω—Ç—ã': '–î–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω—É–∂–Ω—ã: –ø–∞—Å–ø–æ—Ä—Ç, –ò–ù–ù, –°–ù–ò–õ–°, —Å–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤), –º–µ–¥–∫–Ω–∏–∂–∫–∞.',
      '—Å–ø—Ä–∞–≤–∫–∞': '–°–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤. –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ú–§–¶ –∏–ª–∏ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏.',
      '–º–µ–¥–∫–Ω–∏–∂–∫–∞': '–ú–µ–¥–∫–Ω–∏–∂–∫–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø–æ –º–µ—Å—Ç—É —Ä–∞–±–æ—Ç—ã, –º—ã –ø–æ–º–æ–∂–µ–º —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.'
    },
    rotation: {
      '—Ö–æ—Ä–æ—à–æ': '–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ —Å–ª—ã—à–∞—Ç—å, —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ. –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π?',
      '–Ω–æ—Ä–º–∞–ª—å–Ω–æ': '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ö–∞–∫ –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ? –ï—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ?',
      '–≤—Å–µ –æ–∫': '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? –†–∞–±–æ—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª–∞—è?'
    }
  };
  
  function initAKMEGPT() {
    console.log('ü§ñ AKME GPT: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    createAKMEPanel();
    observeMessages();
    addGPTButtons();
  }
  
  function createAKMEPanel() {
    if (akmeGPTPanel) return;
    
    akmeGPTPanel = document.createElement('div');
    akmeGPTPanel.id = 'akme-gpt-panel';
    akmeGPTPanel.innerHTML = `
      <div class="akme-header">
        <div class="akme-logo">ü§ñ AKME GPT</div>
        <div class="akme-status">
          <span class="status-dot online"></span>
          –ê–∫—Ç–∏–≤–µ–Ω
        </div>
        <button class="akme-toggle" id="akme-toggle">‚àí</button>
      </div>
      <div class="akme-content" id="akme-content">
        <div class="akme-suggestions" id="akme-suggestions">
          <div class="suggestion-item">
            <div class="suggestion-text">–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏! üöÄ</div>
          </div>
        </div>
        <div class="akme-controls">
          <button id="generate-response" class="akme-btn primary">–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(akmeGPTPanel);
    setupPanelEvents();
  }
  
  function setupPanelEvents() {
    document.getElementById('akme-toggle').addEventListener('click', function() {
      const content = document.getElementById('akme-content');
      const toggle = document.getElementById('akme-toggle');
      
      if (content.style.display === 'none') {
        content.style.display = 'block';
        toggle.textContent = '‚àí';
      } else {
        content.style.display = 'none';
        toggle.textContent = '+';
      }
    });
    
    document.getElementById('generate-response').addEventListener('click', generateResponse);
  }
  
  function addGPTButtons() {
    const messageInputs = document.querySelectorAll('[contenteditable="true"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ" i], input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ" i]');
    
    messageInputs.forEach(input => {
      if (input.closest('#akme-gpt-panel')) return;
      
      const gptButton = document.createElement('button');
      gptButton.className = 'akme-gpt-btn';
      gptButton.innerHTML = 'ü§ñ';
      gptButton.title = '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AKME GPT';
      gptButton.onclick = (e) => {
        e.preventDefault();
        generateResponseForInput(input);
      };
      
      const parent = input.parentNode;
      if (parent && !parent.querySelector('.akme-gpt-btn')) {
        gptButton.style.position = 'absolute';
        gptButton.style.right = '10px';
        gptButton.style.top = '50%';
        gptButton.style.transform = 'translateY(-50%)';
        gptButton.style.zIndex = '1000';
        parent.style.position = 'relative';
        parent.appendChild(gptButton);
      }
    });
  }
  
  function observeMessages() {
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === 1) {
            const messages = node.querySelectorAll('.message, .chat-message, [class*="message"]');
            messages.forEach(analyzeMessage);
            
            setTimeout(addGPTButtons, 100);
          }
        });
      });
    });
    
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
  
  function analyzeMessage(messageElement) {
    const messageText = messageElement.textContent || messageElement.innerText;
    const isIncoming = !messageElement.classList.contains('outgoing') && 
                      !messageElement.classList.contains('sent');
    
    if (isIncoming && messageText.trim()) {
      const analysis = analyzeIncomingMessage(messageText);
      if (analysis.suggested) {
        showSuggestion(analysis);
      }
    }
  }
  
  function analyzeIncomingMessage(text) {
    const lowerText = text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
    for (const [key, response] of Object.entries(knowledgeBase.objections)) {
      if (lowerText.includes(key)) {
        return {
          type: 'objection',
          category: key,
          text: text,
          suggested: response
        };
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    for (const [key, response] of Object.entries(knowledgeBase.salary)) {
      if (lowerText.includes(key)) {
        return {
          type: 'salary',
          category: key,
          text: text,
          suggested: response
        };
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    for (const [key, response] of Object.entries(knowledgeBase.documents)) {
      if (lowerText.includes(key)) {
        return {
          type: 'documents',
          category: key,
          text: text,
          suggested: response
        };
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–µ–≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
    for (const [key, response] of Object.entries(knowledgeBase.rotation)) {
      if (lowerText.includes(key)) {
        return {
          type: 'rotation',
          category: key,
          text: text,
          suggested: response
        };
      }
    }
    
    return {
      type: 'general',
      category: 'unknown',
      text: text,
      suggested: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å.'
    };
  }
  
  function showSuggestion(analysis) {
    const suggestionsContainer = document.getElementById('akme-suggestions');
    if (!suggestionsContainer) return;
    
    const suggestionElement = document.createElement('div');
    suggestionElement.className = 'suggestion-item';
    suggestionElement.innerHTML = `
      <div class="suggestion-header">
        <span class="suggestion-type">${getTypeLabel(analysis.type)}</span>
        <span class="suggestion-time">${new Date().toLocaleTimeString()}</span>
      </div>
      <div class="suggestion-text">${analysis.suggested}</div>
      <div class="suggestion-actions">
        <button class="suggestion-btn use" onclick="akmeGPT.useSuggestion(\`${analysis.suggested}\`)">
          –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        </button>
        <button class="suggestion-btn edit" onclick="akmeGPT.editSuggestion(\`${analysis.suggested}\`)">
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </button>
      </div>
    `;
    
    suggestionsContainer.insertBefore(suggestionElement, suggestionsContainer.firstChild);
    
    while (suggestionsContainer.children.length > 5) {
      suggestionsContainer.removeChild(suggestionsContainer.lastChild);
    }
  }
  
  function getTypeLabel(type) {
    const labels = {
      'objection': 'üö´ –í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ',
      'salary': 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞',
      'documents': 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã',
      'rotation': 'üîÑ –ü–µ—Ä–µ–≤–∞—Ö—Ç–æ–≤–∏–∫',
      'general': 'üí¨ –û–±—â–µ–µ'
    };
    return labels[type] || 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ';
  }
  
  function generateResponse() {
    const activeInput = findActiveMessageInput();
    if (!activeInput) {
      alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return;
    }
    
    generateResponseForInput(activeInput);
  }
  
  function generateResponseForInput(input) {
    const lastMessage = getLastIncomingMessage();
    const analysis = analyzeIncomingMessage(lastMessage);
    
    if (analysis.suggested) {
      insertTextIntoInput(input, analysis.suggested);
      showSuggestion(analysis);
    } else {
      insertTextIntoInput(input, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å.');
    }
  }
  
  function findActiveMessageInput() {
    const selectors = [
      '[contenteditable="true"]',
      'textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ" i]',
      'input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ" i]',
      '.message-input',
      '#message-input'
    ];
    
    for (const selector of selectors) {
      const elements = document.querySelectorAll(selector);
      for (const element of elements) {
        if (element.offsetParent !== null && !element.closest('#akme-gpt-panel')) {
          return element;
        }
      }
    }
    
    return null;
  }
  
  function getLastIncomingMessage() {
    const messages = document.querySelectorAll('.message, .chat-message, [class*="message"]');
    for (let i = messages.length - 1; i >= 0; i--) {
      const msg = messages[i];
      const isIncoming = !msg.classList.contains('outgoing') && !msg.classList.contains('sent');
      if (isIncoming) {
        return msg.textContent || msg.innerText;
      }
    }
    return '';
  }
  
  function insertTextIntoInput(input, text) {
    if (input.contentEditable === 'true') {
      input.focus();
      input.innerText = text;
      
      const event = new Event('input', { bubbles: true });
      input.dispatchEvent(event);
    } else {
      input.focus();
      input.value = text;
      
      const inputEvent = new Event('input', { bubbles: true });
      const changeEvent = new Event('change', { bubbles: true });
      input.dispatchEvent(inputEvent);
      input.dispatchEvent(changeEvent);
    }
  }
  
  window.akmeGPT = {
    useSuggestion: function(text) {
      const activeInput = findActiveMessageInput();
      if (activeInput) {
        insertTextIntoInput(activeInput, text);
      }
    },
    
    editSuggestion: function(text) {
      const newText = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç:', text);
      if (newText) {
        this.useSuggestion(newText);
      }
    }
  };
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAKMEGPT);
  } else {
    initAKMEGPT();
  }
  
  let currentUrl = location.href;
  new MutationObserver(() => {
    if (location.href !== currentUrl) {
      currentUrl = location.href;
      setTimeout(initAKMEGPT, 1000);
    }
  }).observe(document, { subtree: true, childList: true });
  
})();