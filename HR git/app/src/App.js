import React, { useState, useEffect, useRef } from 'react';
import { 
  Menu, 
  X, 
  Calendar, 
  Send, 
  CheckCircle, 
  User, 
  MessageSquare,
  Bot,
  Users,
  FileText,
  Bell,
  Search,
  Download,
  MapPin,
  CreditCard,
  BarChart3,
  Zap,
  Globe,
  Upload,
  Edit,
  Save,
  RefreshCw,
  PenTool,
  BookOpen,
  Target,
  MessageCircle
} from 'lucide-react';

const AKME_GPT = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [aiChatOpen, setAiChatOpen] = useState(false);
  const [user, setUser] = useState({ name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', avatar: 'üë©‚Äçüíº' });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const [automationStatus, setAutomationStatus] = useState({
    isActive: false,
    autoReply: false,
    chatScanning: false,
    processedToday: 0,
    autoRepliesCount: 0
  });
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const [realtimeStats, setRealtimeStats] = useState({
    activeChats: 5,
    pendingReplies: 2,
    todayMessages: 23,
    successRate: 85
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è GPT
  const [trainingSession, setTrainingSession] = useState({
    isActive: false,
    mode: 'analysis',
    lessonType: 'conversation', // 'conversation', 'task', 'document', 'sms'
    messages: [],
    currentStep: 0,
    waitingForResponse: false,
    uploadedFile: null
  });

  const navigation = [
    { id: 'dashboard', name: '–î–∞—à–±–æ—Ä–¥', icon: BarChart3 },
    { id: 'automation', name: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', icon: Zap },
    { id: 'training', name: '–û–±—É—á–µ–Ω–∏–µ GPT', icon: Bot },
    { id: 'today', name: '–°–µ–≥–æ–¥–Ω—è', icon: Calendar },
    { id: 'mailings', name: '–†–∞—Å—Å—ã–ª–∫–∏', icon: Send },
    { id: 'check', name: '–ü—Ä–æ–≤–µ—Ä–∫–∞', icon: CheckCircle },
    { id: 'workers', name: '–í–∞—Ö—Ç–æ–≤–∏–∫–∏', icon: Users },
    { id: 'candidates', name: '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã', icon: User },
    { id: 'knowledge', name: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', icon: FileText },
    { id: 'integration', name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', icon: Globe }
  ];

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞
  const DashboardTab = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-white">–î–∞—à–±–æ—Ä–¥ AKME GPT</h2>
        <div className="flex items-center gap-3">
          <div className={`px-3 py-1 rounded-full text-sm font-medium ${
            automationStatus.isActive 
              ? 'bg-green-900 text-green-300' 
              : 'bg-red-900 text-red-300'
          }`}>
            {automationStatus.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
          </div>
          <button 
            onClick={() => setAutomationStatus(prev => ({ ...prev, isActive: !prev.isActive }))}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              automationStatus.isActive
                ? 'bg-red-600 hover:bg-red-700 text-white'
                : 'bg-green-600 hover:bg-green-700 text-white'
            }`}
          >
            {automationStatus.isActive ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã</p>
              <p className="text-2xl font-bold text-white">{realtimeStats.activeChats}</p>
            </div>
            <MessageSquare className="w-8 h-8 text-blue-400" />
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞</p>
              <p className="text-2xl font-bold text-white">{realtimeStats.pendingReplies}</p>
            </div>
            <Bell className="w-8 h-8 text-yellow-400" />
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è</p>
              <p className="text-2xl font-bold text-white">{realtimeStats.todayMessages}</p>
            </div>
            <Send className="w-8 h-8 text-green-400" />
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤</p>
              <p className="text-2xl font-bold text-white">{realtimeStats.successRate}%</p>
            </div>
            <CheckCircle className="w-8 h-8 text-purple-400" />
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold text-white mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
          <div className="space-y-3">
            <div className="flex items-center gap-3 p-3 bg-gray-700 rounded-lg">
              <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
                <Bot className="w-4 h-4 text-white" />
              </div>
              <div className="flex-1">
                <p className="text-white text-sm">–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</p>
                <p className="text-gray-400 text-xs">–ò–≥–æ—Ä—å –ü–µ—Ç—Ä–æ–≤ ‚Ä¢ 2 –º–∏–Ω –Ω–∞–∑–∞–¥</p>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-gray-700 rounded-lg">
              <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                <Search className="w-4 h-4 text-white" />
              </div>
              <div className="flex-1">
                <p className="text-white text-sm">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤</p>
                <p className="text-gray-400 text-xs">5 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Ä¢ 5 –º–∏–Ω –Ω–∞–∑–∞–¥</p>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold text-white mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
          <div className="space-y-3">
            <button 
              onClick={() => setActiveTab('automation')}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-lg flex items-center gap-3 transition-colors"
            >
              <Zap className="w-5 h-5" />
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            </button>
            <button 
              onClick={() => setActiveTab('mailings')}
              className="w-full bg-green-600 hover:bg-green-700 text-white p-3 rounded-lg flex items-center gap-3 transition-colors"
            >
              <Send className="w-5 h-5" />
              –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            </button>
            <button 
              onClick={() => setActiveTab('training')}
              className="w-full bg-purple-600 hover:bg-purple-700 text-white p-3 rounded-lg flex items-center gap-3 transition-colors"
            >
              <Bot className="w-5 h-5" />
              –û–±—É—á–∏—Ç—å GPT
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const AutomationTab = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white mb-6">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h2>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold text-white mb-4">–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-white font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã</p>
                <p className="text-gray-400 text-sm">GPT –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã</p>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input 
                  type="checkbox" 
                  className="sr-only peer"
                  checked={automationStatus.autoReply}
                  onChange={(e) => setAutomationStatus(prev => ({ ...prev, autoReply: e.target.checked }))}
                />
                <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>

            <div className="flex items-center justify-between">
              <div>
                <p className="text-white font-medium">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤</p>
                <p className="text-gray-400 text-sm">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</p>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input 
                  type="checkbox" 
                  className="sr-only peer"
                  checked={automationStatus.chatScanning}
                  onChange={(e) => setAutomationStatus(prev => ({ ...prev, chatScanning: e.target.checked }))}
                />
                <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
              </label>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold text-white mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h3>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
              <span className="text-gray-300">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</span>
              <span className="text-green-400 font-bold">{automationStatus.processedToday}</span>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
              <span className="text-gray-300">–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</span>
              <span className="text-blue-400 font-bold">{automationStatus.autoRepliesCount}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—É—á–µ–Ω–∏—è GPT (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
  const TrainingTab = () => {
    const [inputMessage, setInputMessage] = useState('');
    const [taskDescription, setTaskDescription] = useState('');
    const [smsTemplate, setSmsTemplate] = useState('');
    const chatContainerRef = useRef(null);
    const inputRef = useRef(null);
    
    const startTraining = (mode, lessonType = 'conversation') => {
      let initialMessage = '';
      
      if (mode === 'analysis') {
        initialMessage = "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã –∏ —É—á–∏—Ç—å—Å—è. –ó–∞–≥—Ä—É–∑–∏ —á–∞—Ç –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –¥–∏–∞–ª–æ–≥–µ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —è –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.";
      } else {
        switch(lessonType) {
          case 'conversation':
            initialMessage = "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ —É—Ä–æ–∫—É. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–∫—Ä–∏–ø—Ç–∞—Ö, —É—Å–ª–æ–≤–∏—è—Ö —Ç—Ä—É–¥–∞ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —è –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏.";
            break;
          case 'task':
            initialMessage = "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è. –î–∞–π –º–Ω–µ –ª—é–±–æ–µ –∑–∞–¥–∞–Ω–∏–µ - —è –±—É–¥—É –µ–≥–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏ —É—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?";
            break;
          case 'document':
            initialMessage = "–ì–æ—Ç–æ–≤ –∏–∑—É—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã! –ó–∞–≥—Ä—É–∑–∏ –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (–¥–æ–≥–æ–≤–æ—Ä, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç) - —è –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—é –∏ –∑–∞–ø–æ–º–Ω—é –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.";
            break;
          case 'sms':
            initialMessage = "–ì–æ—Ç–æ–≤ —É—á–∏—Ç—å—Å—è –ø–∏—Å–∞—Ç—å SMS! –î–∞–π –º–Ω–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è - —è –∏–∑—É—á—É —Å—Ç–∏–ª—å –∏ –±—É–¥—É –ø–∏—Å–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.";
            break;
        }
      }
        
      setTrainingSession({
        isActive: true,
        mode: mode,
        lessonType: lessonType,
        messages: [
          {
            id: 1,
            sender: 'gpt',
            text: initialMessage,
            timestamp: new Date().toLocaleTimeString()
          }
        ],
        currentStep: 1,
        waitingForResponse: true,
        uploadedFile: null
      });
    };

    const sendMessage = () => {
      if (!inputMessage.trim() || !trainingSession.isActive) return;

      const userMessage = {
        id: trainingSession.messages.length + 1,
        sender: 'user',
        text: inputMessage,
        timestamp: new Date().toLocaleTimeString()
      };

      const gptResponse = generateTrainingResponse(inputMessage, trainingSession.mode, trainingSession.lessonType);
      const gptMessage = {
        id: trainingSession.messages.length + 2,
        sender: 'gpt',
        text: gptResponse,
        timestamp: new Date().toLocaleTimeString()
      };

      setTrainingSession(prev => ({
        ...prev,
        messages: [...prev.messages, userMessage, gptMessage],
        currentStep: prev.currentStep + 1,
        waitingForResponse: true
      }));

      setInputMessage('');
      if (inputRef.current) inputRef.current.focus();
    };

    const generateTrainingResponse = (userInput, mode, lessonType) => {
      const lowerInput = userInput.toLowerCase();
      
      if (mode === 'analysis') {
        if (lowerInput.includes('–∑–∞—Ä–ø–ª–∞—Ç–∞') || lowerInput.includes('—Å–∫–æ–ª—å–∫–æ')) {
          return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 80 000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü + –ø—Ä–µ–º–∏–∏'. –ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã? –ï—Å—Ç—å –ª–∏ –Ω—é–∞–Ω—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤?";
        } else if (lowerInput.includes('–¥–æ–∫—É–º–µ–Ω—Ç—ã')) {
          return "–í–∏–∂—É –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: –ø–∞—Å–ø–æ—Ä—Ç, –ò–ù–ù, –°–ù–ò–õ–°, —Å–ø—Ä–∞–≤–∫–∞ –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏, –º–µ–¥–∫–Ω–∏–∂–∫–∞. –ù–æ —Å–∫–∞–∂–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π? –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ?";
        } else if (lowerInput.includes('–¥–∞–ª–µ–∫–æ') || lowerInput.includes('—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ')) {
          return "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏. –Ø –ø—Ä–µ–¥–ª–æ–∂—É –ø—Ä–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –±–∏–ª–µ—Ç–æ–≤ –∏ —Ö–æ—Ä–æ—à—É—é –∑–∞—Ä–ø–ª–∞—Ç—É. –ê –∫–∞–∫–∏–µ –µ—â–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ? –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?";
        } else {
          return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–ª—É—á–∞–π! –ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ –ø–æ–Ω—è—Ç—å: –∫–∞–∫ –±—ã –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ "${userInput}"? –ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∑–¥–µ—Å—å –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?`;
        }
      } else {
        switch(lessonType) {
          case 'conversation':
            if (lowerInput.includes('—É—Ä–æ–∫') || lowerInput.includes('—Ä–∞—Å—Å–∫–∞–∂—É')) {
              return "–û—Ç–ª–∏—á–Ω–æ! –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é. –ó–∞–ø–∏—Å—ã–≤–∞—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.";
            } else if (lowerInput.includes('–æ–±—ä–µ–∫—Ç') || lowerInput.includes('–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ')) {
              return "–ó–∞–ø–∏—Å–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ. –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã: —É—Å–ª–æ–≤–∏—è, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ï—Å—Ç—å –ª–∏ –µ—â–µ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –æ–± —ç—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ? –ò–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç–µ –ø—Ä–æ –¥—Ä—É–≥–æ–π?";
            } else {
              return `–ó–∞–ø–∏—Å—ã–≤–∞—é: "${userInput}". –û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è! –ï—Å—Ç—å –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞? –ò–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏?`;
            }
            
          case 'task':
            if (lowerInput.includes('–∑–∞–¥–∞–Ω–∏–µ') || lowerInput.includes('—Å–¥–µ–ª–∞–π') || lowerInput.includes('–Ω–∞–ø–∏—à–∏')) {
              return "–ü–æ–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ! –í—ã–ø–æ–ª–Ω—è—é... –ì–æ—Ç–æ–≤–æ! –ö–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å? –î–∞–π—Ç–µ –µ—â–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏!";
            } else if (lowerInput.includes('–æ—Ç–≤–µ—Ç—å') || lowerInput.includes('–∫–∞–Ω–¥–∏–¥–∞—Ç—É')) {
              return `–°–æ—Å—Ç–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç—É... –í–æ—Ç –º–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É: [–æ—Ç–≤–µ—Ç]". –ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥? –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?`;
            } else {
              return `–í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞–Ω–∏–µ: "${userInput}". –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?`;
            }
            
          case 'document':
            if (lowerInput.includes('–¥–æ–∫—É–º–µ–Ω—Ç') || lowerInput.includes('—Ñ–∞–π–ª') || lowerInput.includes('–¥–æ–≥–æ–≤–æ—Ä')) {
              return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç... –í—ã–¥–µ–ª–∏–ª –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: [–æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã]. –ó–∞–ø–æ–º–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é. –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ?";
            } else {
              return `–ò–∑—É—á–∞—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: "${userInput}". –ó–∞–ø–∏—Å–∞–ª –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –ö–∞–∫–∏–µ –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–∞–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã?`;
            }
            
          case 'sms':
            if (lowerInput.includes('—Å–º—Å') || lowerInput.includes('—Å–æ–æ–±—â–µ–Ω–∏–µ') || lowerInput.includes('–Ω–∞–ø–∏—à–∏')) {
              return "–ò–∑—É—á–∞—é —Å—Ç–∏–ª—å SMS... –ü–æ–Ω—è–ª: –∫—Ä–∞—Ç–∫–æ—Å—Ç—å, –ª–∏—á–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —á–µ—Ç–∫–∞—è —Ü–µ–ª—å. –ú–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: '–ò–≥–æ—Ä—å, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ? –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ–º–æ–π?' –ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–π —Å—Ç–∏–ª—å?";
            } else {
              return `–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é SMS-—à–∞–±–ª–æ–Ω: "${userInput}". –ó–∞–ø–æ–º–Ω–∏–ª —Ç–æ–Ω –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –Ω–∞–ø–∏—Å–∞–ª –ø–æ—Ö–æ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?`;
            }
            
          default:
            return `–ó–∞–ø–∏—Å—ã–≤–∞—é: "${userInput}". –û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è! –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏?`;
        }
      }
    };

    const executeTask = () => {
      if (!taskDescription.trim()) return;
      
      const taskMessage = {
        id: trainingSession.messages.length + 1,
        sender: 'user',
        text: `–ó–∞–¥–∞–Ω–∏–µ: ${taskDescription}`,
        timestamp: new Date().toLocaleTimeString()
      };

      const gptResponse = `–í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞–Ω–∏–µ: "${taskDescription}"\n\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n[–ó–¥–µ—Å—å GPT –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è]\n\n–ö–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?`;
      
      const gptMessage = {
        id: trainingSession.messages.length + 2,
        sender: 'gpt',
        text: gptResponse,
        timestamp: new Date().toLocaleTimeString()
      };

      setTrainingSession(prev => ({
        ...prev,
        messages: [...prev.messages, taskMessage, gptMessage]
      }));

      setTaskDescription('');
    };

    const createSMS = () => {
      if (!smsTemplate.trim()) return;
      
      const smsMessage = {
        id: trainingSession.messages.length + 1,
        sender: 'user',
        text: `SMS —à–∞–±–ª–æ–Ω: ${smsTemplate}`,
        timestamp: new Date().toLocaleTimeString()
      };

      const gptResponse = `–ò–∑—É—á–∏–ª SMS-—Å—Ç–∏–ª—å! –ú–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞:\n\nüì± "${smsTemplate.replace(/\{name\}/g, '–ò–≥–æ—Ä—å')}"\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª —Å—Ç–∏–ª—å? –°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã?`;
      
      const gptMessage = {
        id: trainingSession.messages.length + 2,
        sender: 'gpt',
        text: gptResponse,
        timestamp: new Date().toLocaleTimeString()
      };

      setTrainingSession(prev => ({
        ...prev,
        messages: [...prev.messages, smsMessage, gptMessage]
      }));

      setSmsTemplate('');
    };

    const handleFileUpload = (event) => {
      const file = event.target.files[0];
      if (file) {
        setTrainingSession(prev => ({
          ...prev,
          uploadedFile: file
        }));

        const fileMessage = {
          id: trainingSession.messages.length + 1,
          sender: 'user',
          text: `üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file.name}`,
          timestamp: new Date().toLocaleTimeString()
        };

        const gptResponse = `–û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª "${file.name}". –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...\n\nüìã –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ä¢ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: [–æ–ø—Ä–µ–¥–µ–ª—è—é —Ç–∏–ø]\n‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã: [–≤—ã–¥–µ–ª—è—é –≥–ª–∞–≤–Ω–æ–µ]\n‚Ä¢ –í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: [–∑–∞–ø–æ–º–∏–Ω–∞—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É]\n\n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π! –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤ —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ?`;
        
        const gptMessage = {
          id: trainingSession.messages.length + 2,
          sender: 'gpt',
          text: gptResponse,
          timestamp: new Date().toLocaleTimeString()
        };

        setTrainingSession(prev => ({
          ...prev,
          messages: [...prev.messages, fileMessage, gptMessage]
        }));
      }
    };

    useEffect(() => {
      if (chatContainerRef.current) {
        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
      }
    }, [trainingSession.messages]);

    const stopTraining = () => {
      setTrainingSession({
        isActive: false,
        mode: 'analysis',
        lessonType: 'conversation',
        messages: [],
        currentStep: 0,
        waitingForResponse: false,
        uploadedFile: null
      });
    };

    const exportTrainingLog = () => {
      const log = trainingSession.messages.map(msg => 
        `[${msg.timestamp}] ${msg.sender.toUpperCase()}: ${msg.text}`
      ).join('\n\n');
      
      const blob = new Blob([log], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `training-session-${new Date().toISOString().split('T')[0]}.txt`;
      a.click();
      URL.revokeObjectURL(url);
    };

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-bold text-white">–û–±—É—á–µ–Ω–∏–µ GPT</h2>
          <div className="flex items-center gap-3">
            {trainingSession.isActive && (
              <div className="px-3 py-1 bg-green-900 text-green-300 rounded-full text-sm font-medium animate-pulse">
                üü¢ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
              </div>
            )}
          </div>
        </div>

        {!trainingSession.isActive ? (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-lg p-8 border border-gray-700 text-center">
              <Bot className="w-16 h-16 text-blue-400 mx-auto mb-6" />
              <h3 className="text-xl font-semibold text-white mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è</h3>
              <p className="text-gray-400 mb-8">GPT –≥–æ—Ç–æ–≤ —É—á–∏—Ç—å—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –±—É–¥–µ—Ç–µ –µ–≥–æ –æ–±—É—á–∞—Ç—å:</p>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-gray-700 rounded-lg p-6">
                  <div className="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Search className="w-6 h-6 text-white" />
                  </div>
                  <h4 className="text-lg font-semibold text-white mb-2">–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤</h4>
                  <p className="text-gray-300 text-sm mb-4">GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏, –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö</p>
                  <button 
                    onClick={() => startTraining('analysis')}
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
                  </button>
                </div>

                <div className="bg-gray-700 rounded-lg p-6">
                  <div className="w-12 h-12 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <BookOpen className="w-6 h-6 text-white" />
                  </div>
                  <h4 className="text-lg font-semibold text-white mb-2">–£—Ä–æ–∫–∏ –∏ –±–µ—Å–µ–¥—ã</h4>
                  <p className="text-gray-300 text-sm mb-4">–û–±—â–∞–π—Ç–µ—Å—å —Å GPT, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—É, –¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º</p>
                  <button 
                    onClick={() => startTraining('lesson', 'conversation')}
                    className="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    –ù–∞—á–∞—Ç—å —É—Ä–æ–∫
                  </button>
                </div>
              </div>
            </div>

            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h3 className="text-lg font-semibold text-white mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ–±—É—á–µ–Ω–∏—è</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-gray-700 rounded-lg p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center">
                      <Target className="w-4 h-4 text-white" />
                    </div>
                    <h4 className="text-white font-medium">–ó–∞–¥–∞–Ω–∏—è</h4>
                  </div>
                  <p className="text-gray-300 text-sm mb-3">–î–∞–≤–∞–π—Ç–µ GPT –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</p>
                  <button 
                    onClick={() => startTraining('lesson', 'task')}
                    className="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-3 rounded-lg transition-colors text-sm"
                  >
                    –î–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                  </button>
                </div>

                <div className="bg-gray-700 rounded-lg p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <div className="w-8 h-8 bg-orange-600 rounded-full flex items-center justify-center">
                      <FileText className="w-4 h-4 text-white" />
                    </div>
                    <h4 className="text-white font-medium">–î–æ–∫—É–º–µ–Ω—Ç—ã</h4>
                  </div>
                  <p className="text-gray-300 text-sm mb-3">–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è GPT</p>
                  <button 
                    onClick={() => startTraining('lesson', 'document')}
                    className="w-full bg-orange-600 hover:bg-orange-700 text-white py-2 px-3 rounded-lg transition-colors text-sm"
                  >
                    –ò–∑—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
                  </button>
                </div>

                <div className="bg-gray-700 rounded-lg p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <div className="w-8 h-8 bg-teal-600 rounded-full flex items-center justify-center">
                      <MessageCircle className="w-4 h-4 text-white" />
                    </div>
                    <h4 className="text-white font-medium">SMS —à–∞–±–ª–æ–Ω—ã</h4>
                  </div>
                  <p className="text-gray-300 text-sm mb-3">–û–±—É—á–∞–π—Ç–µ GPT –ø–∏—Å–∞—Ç—å SMS –∏ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
                  <button 
                    onClick={() => startTraining('lesson', 'sms')}
                    className="w-full bg-teal-600 hover:bg-teal-700 text-white py-2 px-3 rounded-lg transition-colors text-sm"
                  >
                    –ü–∏—Å–∞—Ç—å SMS
                  </button>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="bg-gray-800 rounded-lg border border-gray-700 h-[600px] flex flex-col">
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <div className="flex items-center gap-3">
                <Bot className="w-6 h-6 text-blue-400" />
                <div>
                  <h3 className="text-white font-medium">GPT –û–±—É—á–µ–Ω–∏–µ</h3>
                  <p className="text-gray-400 text-sm">
                    {trainingSession.mode === 'analysis' ? '–†–µ–∂–∏–º: –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤' : 
                     trainingSession.lessonType === 'conversation' ? '–†–µ–∂–∏–º: –£—Ä–æ–∫–∏ –∏ –±–µ—Å–µ–¥—ã' :
                     trainingSession.lessonType === 'task' ? '–†–µ–∂–∏–º: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π' :
                     trainingSession.lessonType === 'document' ? '–†–µ–∂–∏–º: –ò–∑—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' :
                     '–†–µ–∂–∏–º: –û–±—É—á–µ–Ω–∏–µ SMS'}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <button 
                  onClick={exportTrainingLog}
                  className="p-2 text-gray-400 hover:text-white rounded-lg transition-colors"
                  title="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞"
                >
                  <Download className="w-5 h-5" />
                </button>
                <button 
                  onClick={stopTraining}
                  className="p-2 text-gray-400 hover:text-white rounded-lg transition-colors"
                  title="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>

            <div ref={chatContainerRef} className="flex-1 p-4 overflow-y-auto space-y-4">
              {trainingSession.messages.map(message => (
                <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-[80%] rounded-lg p-3 ${
                    message.sender === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gray-700 text-gray-100'
                  }`}>
                    <div className="flex items-center gap-2 mb-1">
                      {message.sender === 'gpt' ? (
                        <Bot className="w-4 h-4 text-blue-400" />
                      ) : (
                        <User className="w-4 h-4 text-blue-200" />
                      )}
                      <span className="text-xs opacity-75">{message.timestamp}</span>
                    </div>
                    <p className="text-sm leading-relaxed whitespace-pre-line">{message.text}</p>
                  </div>
                </div>
              ))}
            </div>

            {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ */}
            {trainingSession.lessonType === 'task' && (
              <div className="p-4 border-t border-gray-700 bg-purple-900/20">
                <div className="flex gap-3 mb-3">
                  <input
                    type="text"
                    value={taskDescription}
                    onChange={(e) => setTaskDescription(e.target.value)}
                    placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è GPT (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç—É –æ –∑–∞—Ä–ø–ª–∞—Ç–µ')"
                    className="flex-1 p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400"
                  />
                  <button
                    onClick={executeTask}
                    disabled={!taskDescription.trim()}
                    className="px-6 py-3 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white rounded-lg transition-colors flex items-center gap-2"
                  >
                    <Target className="w-4 h-4" />
                    –î–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                  </button>
                </div>
              </div>
            )}

            {trainingSession.lessonType === 'document' && (
              <div className="p-4 border-t border-gray-700 bg-orange-900/20">
                <div className="flex gap-3 mb-3">
                  <input
                    type="file"
                    onChange={handleFileUpload}
                    accept=".txt,.doc,.docx,.pdf"
                    className="hidden"
                    id="file-upload"
                  />
                  <label
                    htmlFor="file-upload"
                    className="flex-1 p-3 bg-gray-700 border border-gray-600 rounded-lg text-gray-400 cursor-pointer hover:bg-gray-600 transition-colors text-center"
                  >
                    {trainingSession.uploadedFile ? trainingSession.uploadedFile.name : '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'}
                  </label>
                  <button className="px-6 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors flex items-center gap-2">
                    <Upload className="w-4 h-4" />
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å
                  </button>
                </div>
              </div>
            )}

            {trainingSession.lessonType === 'sms' && (
              <div className="p-4 border-t border-gray-700 bg-teal-900/20">
                <div className="flex gap-3 mb-3">
                  <input
                    type="text"
                    value={smsTemplate}
                    onChange={(e) => setSmsTemplate(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ SMS —à–∞–±–ª–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–≤–µ—Ç, {name}! –ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ?')"
                    className="flex-1 p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400"
                  />
                  <button
                    onClick={createSMS}
                    disabled={!smsTemplate.trim()}
                    className="px-6 py-3 bg-teal-600 hover:bg-teal-700 disabled:bg-gray-600 text-white rounded-lg transition-colors flex items-center gap-2"
                  >
                    <MessageCircle className="w-4 h-4" />
                    –°–æ–∑–¥–∞—Ç—å SMS
                  </button>
                </div>
              </div>
            )}

            <div className="p-4 border-t border-gray-700">
              <div className="flex gap-3">
                <input
                  ref={inputRef}
                  type="text"
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                  placeholder={
                    trainingSession.mode === 'analysis' 
                      ? "–û–ø–∏—à–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞..." 
                      : trainingSession.lessonType === 'conversation'
                      ? "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–∫—Ä–∏–ø—Ç–∞—Ö, —É—Å–ª–æ–≤–∏—è—Ö —Ç—Ä—É–¥–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
                      : trainingSession.lessonType === 'task'
                      ? "–î–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ..."
                      : trainingSession.lessonType === 'document'
                      ? "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É –∏–ª–∏ –¥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è..."
                      : "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ SMS –∏–ª–∏ –¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä..."
                  }
                  className="flex-1 p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button
                  onClick={sendMessage}
                  disabled={!inputMessage.trim()}
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg transition-colors flex items-center gap-2"
                >
                  <Send className="w-4 h-4" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
              
              <div className="flex items-center gap-4 mt-3 text-sm text-gray-400">
                <span>–®–∞–≥: {trainingSession.currentStep}</span>
                <span>‚Ä¢</span>
                <span>–°–æ–æ–±—â–µ–Ω–∏–π: {trainingSession.messages.length}</span>
                <span>‚Ä¢</span>
                <span className="text-blue-400">Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</span>
              </div>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center gap-3 mb-2">
              <Search className="w-5 h-5 text-blue-400" />
              <h4 className="text-white font-medium">–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤</h4>
            </div>
            <p className="text-2xl font-bold text-white">12</p>
            <p className="text-gray-400 text-sm">–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤</p>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center gap-3 mb-2">
              <BookOpen className="w-5 h-5 text-green-400" />
              <h4 className="text-white font-medium">–£—Ä–æ–∫–∏</h4>
            </div>
            <p className="text-2xl font-bold text-white">8</p>
            <p className="text-gray-400 text-sm">–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤</p>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center gap-3 mb-2">
              <Target className="w-5 h-5 text-purple-400" />
              <h4 className="text-white font-medium">–ó–∞–¥–∞–Ω–∏—è</h4>
            </div>
            <p className="text-2xl font-bold text-white">15</p>
            <p className="text-gray-400 text-sm">–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π</p>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center gap-3 mb-2">
              <Bot className="w-5 h-5 text-orange-400" />
              <h4 className="text-white font-medium">–ó–Ω–∞–Ω–∏—è</h4>
            </div>
            <p className="text-2xl font-bold text-white">156</p>
            <p className="text-gray-400 text-sm">–§–∞–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π</p>
          </div>
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  const IntegrationTab = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white mb-6">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Wazzup24</h2>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold text-white mb-4">–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
          
          <div className="space-y-4">
            <div className="flex items-center gap-3">
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
              <span className="text-green-400 font-medium">–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ</span>
            </div>
            
            <div className="flex items-center gap-3">
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
              <span className="text-green-400 font-medium">Wazzup24 –ø–æ–¥–∫–ª—é—á–µ–Ω</span>
            </div>
          </div>
          
          <div className="mt-6 p-4 bg-green-900 border border-green-700 rounded-lg">
            <p className="text-green-300 text-sm">
              ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.
            </p>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-lg font-semibold text-white mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</h3>
          
          <div className="space-y-4">
            <div>
              <label className="block text-white font-medium mb-2">URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</label>
              <input 
                type="text" 
                className="w-full bg-gray-700 border border-gray-600 rounded-lg p-3 text-white"
                value="http://localhost:3000"
                readOnly
              />
            </div>
            
            <button className="w-full bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-lg font-medium transition-colors">
              –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  const TodayTab = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white mb-6">–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</h2>
      
      <div className="grid gap-4">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
              <CreditCard className="w-4 h-4 text-white" />
            </div>
            <h3 className="text-lg font-semibold text-white">–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã</h3>
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
              <span className="text-gray-300">–ò–≥–æ—Ä—å –ü–µ—Ç—Ä–æ–≤ ‚Üí –ú–æ—Å–∫–≤–∞</span>
              <button className="text-blue-400 hover:text-blue-300 text-sm">
                –ö—É–ø–∏—Ç—å –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
              </button>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
              <MapPin className="w-4 h-4 text-white" />
            </div>
            <h3 className="text-lg font-semibold text-white">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∑–∞—Å–µ–ª–µ–Ω–∏—è</h3>
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
              <span className="text-gray-300">–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤</span>
              <button className="text-green-400 hover:text-green-300 text-sm">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const renderContent = () => {
    switch(activeTab) {
      case 'dashboard': return <DashboardTab />;
      case 'automation': return <AutomationTab />;
      case 'training': return <TrainingTab />;
      case 'integration': return <IntegrationTab />;
      case 'today': return <TodayTab />;
      case 'mailings': return <div className="text-white p-6">–†–∞—Å—Å—ã–ª–∫–∏</div>;
      case 'check': return <div className="text-white p-6">–ü—Ä–æ–≤–µ—Ä–∫–∞</div>;
      case 'workers': return <div className="text-white p-6">–í–∞—Ö—Ç–æ–≤–∏–∫–∏</div>;
      case 'candidates': return <div className="text-white p-6">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</div>;
      case 'knowledge': return <div className="text-white p-6">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</div>;
      default: return <DashboardTab />;
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    const interval = setInterval(() => {
      setRealtimeStats(prev => ({
        ...prev,
        activeChats: Math.floor(Math.random() * 10) + 5,
        pendingReplies: Math.floor(Math.random() * 3) + 1,
        todayMessages: prev.todayMessages + Math.floor(Math.random() * 2)
      }));
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      <header className="bg-gray-800 border-b border-gray-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <button 
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="p-2 hover:bg-gray-700 rounded-lg transition-colors"
            >
              <Menu className="w-5 h-5" />
            </button>
            <h1 className="text-xl font-bold">AKME GPT</h1>
            {automationStatus.isActive && (
              <div className="px-3 py-1 bg-green-900 text-green-300 rounded-full text-sm font-medium animate-pulse">
                ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
              </div>
            )}
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2 px-3 py-1 bg-gray-700 rounded-lg">
              <Globe className="w-4 h-4 text-green-400" />
              <span className="text-sm">Wazzup24 –ø–æ–¥–∫–ª—é—á–µ–Ω</span>
            </div>
            <button className="p-2 hover:bg-gray-700 rounded-lg transition-colors">
              <Bell className="w-5 h-5" />
            </button>
            <div className="flex items-center gap-2">
              <span className="text-2xl">{user.avatar}</span>
              <span className="font-medium">{user.name}</span>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        <aside className={`${sidebarOpen ? 'w-64' : 'w-0'} transition-all duration-300 bg-gray-800 border-r border-gray-700 overflow-hidden`}>
          <nav className="p-4">
            <div className="space-y-2">
              {navigation.map(item => (
                <button
                  key={item.id}
                  onClick={() => setActiveTab(item.id)}
                  className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors ${
                    activeTab === item.id ? 'bg-blue-600 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-700'
                  }`}
                >
                  <item.icon className="w-5 h-5" />
                  <span>{item.name}</span>
                </button>
              ))}
            </div>
          </nav>
        </aside>

        <main className="flex-1 p-6">
          {renderContent()}
        </main>
      </div>

      <button 
        onClick={() => setAiChatOpen(!aiChatOpen)}
        className="fixed bottom-4 left-4 w-12 h-12 bg-blue-600 hover:bg-blue-700 rounded-full flex items-center justify-center transition-colors shadow-lg"
      >
        <Bot className="w-6 h-6 text-white" />
      </button>

      {aiChatOpen && (
        <div className="fixed bottom-20 left-4 w-80 h-96 bg-gray-800 rounded-lg border border-gray-700 shadow-lg">
          <div className="flex items-center justify-between p-4 border-b border-gray-700">
            <div className="flex items-center gap-2">
              <Bot className="w-5 h-5 text-blue-400" />
              <span className="text-white font-medium">AI –ü–æ–º–æ—â–Ω–∏–∫</span>
            </div>
            <button 
              onClick={() => setAiChatOpen(false)}
              className="text-gray-400 hover:text-white"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div className="p-4 h-64 overflow-y-auto">
            <div className="space-y-3">
              <div className="bg-gray-700 rounded-lg p-3">
                <p className="text-white text-sm">–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?</p>
              </div>
            </div>
          </div>
          
          <div className="p-4 border-t border-gray-700">
            <div className="flex gap-2">
              <input 
                type="text" 
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                className="flex-1 p-2 bg-gray-700 border border-gray-600 rounded-lg text-white text-sm"
              />
              <button className="p-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors">
                <Send className="w-4 h-4 text-white" />
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AKME_GPT;